custom:
  securityGroups: 
    dev: sg-0ffa30a21372aae47
  
  subnets: 
    dev: subnet-0340b773dc1ca33f7
  


  environments:
    dev:
    # API
      DATABASE_API_NAME: FloiintDb
      DABATASE_API_SERVER: 172.31.1.175
      DATABASE_API_PORT: 27017
      DATABASE_API_USER: admin
      DATABASE_API_PASS: securepassword

    # AUTH
      DATABASE_AUTH_NAME: FloiintDbAuth
      DATABASE_AUTH_SERVER: 172.31.1.175
      DATABASE_AUTH_PORT: 27017
      DATABASE_AUTH_USER: admin
      DATABASE_AUTH_PASS: securepassword
      SECRET_TOKEN: Aa123456%
      SECRET_REFRESH_TOKEN: Aa123456%
      TOKEN_LIFE: 1d
      TOKEN_ACTIVATION_LIFE: 1m
      REFRESH_TOKEN_LIFE: 7d
      REGISTRATION_VALIDATION_URL: https://etohps0ija.execute-api.eu-west-3.amazonaws.com/dev/register/validation
    
    # MULT    
      DATABASE_MULT_NAME: FloiintDbMult
      DABATASE_MULT_SERVER: 172.31.1.175
      DATABASE_MULT_PORT: 27017
      DATABASE_MULT_USER: admin
      DATABASE_MULT_PASS: securepassword
      SEC_IMAGE_KEY: Aa123456$
      MULTIMEDIA_PATH: s3://floiint-bucket/users
      IMAGE_DIR_PATH: /images
      AUDIO_DIR_PATH: /audios
      DB_IMAGE_COLLECTION: user_images
      DB_AUDIO_COLLECTION: user_audios
      BUCKET_NAME: floiint-bucket

    # CHAT      
      DATABASE_CHAT_NAME: FloiintDbChat
      DABATASE_CHAT_SERVER: 172.31.1.175
      DATABASE_CHAT_PORT: 27017
      DATABASE_CHAT_USER: admin
      DATABASE_CHAT_PASS: securepassword
      SOCKET_SERVER: 172.31.2.81
      SOCKET_SERVER_PORT: 8000

    prod:
      DB_HOST: prod-db.example.com
      API_KEY: prod-key

  # IAM role statements to allow S3 access
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl # Required if using ACLs like "public-read"
          Resource:
            - arn:aws:s3:::floiint-bucket/*
        - Effect: Allow
          Action:
            - s3:GetObject # Optional: Allows retrieving files
          Resource:
            - arn:aws:s3:::floiint-bucket/*


service: lambda-floint-api

provider:
  name: aws
  profile: floiint
  runtime: nodejs18.x  
  region: eu-west-3
  apiGateway:
    binaryMediaTypes:
      - multipart/form-data

functions:
  floiint-api:    
    image:       
      uri: 392002456877.dkr.ecr.eu-west-3.amazonaws.com/floiint-docker:latest
    environment: 
        HANDLER: api
        DATABASE_API_NAME: ${self:custom.environments.${opt:stage}.DATABASE_API_NAME}
        DABATASE_API_SERVER: ${self:custom.environments.${opt:stage}.DABATASE_API_SERVER}
        DATABASE_API_PORT: ${self:custom.environments.${opt:stage}.DATABASE_API_PORT}
        DATABASE_API_USER: ${self:custom.environments.${opt:stage}.DATABASE_API_USER}
        DATABASE_API_PASS: ${self:custom.environments.${opt:stage}.DATABASE_API_PASS}
        SECRET_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_TOKEN}
        SECRET_REFRESH_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_REFRESH_TOKEN}

        DATABASE_MULT_NAME: ${self:custom.environments.${opt:stage}.DATABASE_MULT_NAME}
        DABATASE_MULT_SERVER: ${self:custom.environments.${opt:stage}.DABATASE_MULT_SERVER}
        DATABASE_MULT_PORT: ${self:custom.environments.${opt:stage}.DATABASE_MULT_PORT}
        DATABASE_MULT_USER: ${self:custom.environments.${opt:stage}.DATABASE_MULT_USER}
        DATABASE_MULT_PASS: ${self:custom.environments.${opt:stage}.DATABASE_MULT_PASS}
        
    vpc:
      securityGroupIds:
        - ${self:custom.securityGroups.${opt:stage}}
      subnetIds:        
        - ${self:custom.subnets.${opt:stage}}         
    events:
      - http:
          path: api
          method: post
          private: true

  floiint-auth:
    image:       
      uri: 392002456877.dkr.ecr.eu-west-3.amazonaws.com/floiint-docker:latest
    environment: 
        HANDLER: auth
        DATABASE_API_NAME: ${self:custom.environments.${opt:stage}.DATABASE_API_NAME}
        DABATASE_API_SERVER: ${self:custom.environments.${opt:stage}.DABATASE_API_SERVER}
        DATABASE_API_PORT: ${self:custom.environments.${opt:stage}.DATABASE_API_PORT}
        DATABASE_API_USER: ${self:custom.environments.${opt:stage}.DATABASE_API_USER}
        DATABASE_API_PASS: ${self:custom.environments.${opt:stage}.DATABASE_API_PASS}
        DATABASE_AUTH_NAME: ${self:custom.environments.${opt:stage}.DATABASE_AUTH_NAME}
        DATABASE_AUTH_SERVER: ${self:custom.environments.${opt:stage}.DATABASE_AUTH_SERVER}
        DATABASE_AUTH_PORT: ${self:custom.environments.${opt:stage}.DATABASE_AUTH_PORT}
        DATABASE_AUTH_USER: ${self:custom.environments.${opt:stage}.DATABASE_AUTH_USER}
        DATABASE_AUTH_PASS: ${self:custom.environments.${opt:stage}.DATABASE_AUTH_PASS}
        SECRET_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_TOKEN}
        SECRET_REFRESH_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_REFRESH_TOKEN}
        TOKEN_LIFE: ${self:custom.environments.${opt:stage}.TOKEN_LIFE}
        TOKEN_ACTIVATION_LIFE: ${self:custom.environments.${opt:stage}.TOKEN_ACTIVATION_LIFE}
        REFRESH_TOKEN_LIFE: ${self:custom.environments.${opt:stage}.REFRESH_TOKEN_LIFE}
        REGISTRATION_VALIDATION_URL: ${self:custom.environments.${opt:stage}.REGISTRATION_VALIDATION_URL}
        
    vpc:
      securityGroupIds:
        - ${self:custom.securityGroups.${opt:stage}}
      subnetIds:        
        - ${self:custom.subnets.${opt:stage}}
    events:
      - http:
          path: login
          method: post
          private: true

      - http:
          path: register
          method: post
          private: true

      - http:
          path: register/validation/{token}/{id}
          method: get          

  floiint-mult:    
    image:       
      uri: 392002456877.dkr.ecr.eu-west-3.amazonaws.com/floiint-docker:latest
    environment: 
        HANDLER: mult
        DATABASE_MULT_NAME: ${self:custom.environments.${opt:stage}.DATABASE_MULT_NAME}
        DABATASE_MULT_SERVER: ${self:custom.environments.${opt:stage}.DABATASE_MULT_SERVER}
        DATABASE_MULT_PORT: ${self:custom.environments.${opt:stage}.DATABASE_MULT_PORT}
        DATABASE_MULT_USER: ${self:custom.environments.${opt:stage}.DATABASE_MULT_USER}
        DATABASE_MULT_PASS: ${self:custom.environments.${opt:stage}.DATABASE_MULT_PASS}
        SEC_IMAGE_KEY: ${self:custom.environments.${opt:stage}.SEC_IMAGE_KEY}
        MULTIMEDIA_PATH: ${self:custom.environments.${opt:stage}.MULTIMEDIA_PATH}
        IMAGE_DIR_PATH: ${self:custom.environments.${opt:stage}.IMAGE_DIR_PATH}
        AUDIO_DIR_PATH: ${self:custom.environments.${opt:stage}.AUDIO_DIR_PATH}
        DB_IMAGE_COLLECTION: ${self:custom.environments.${opt:stage}.DB_IMAGE_COLLECTION}
        DB_AUDIO_COLLECTION: ${self:custom.environments.${opt:stage}.DB_AUDIO_COLLECTION}
        SECRET_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_TOKEN}
        SECRET_REFRESH_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_REFRESH_TOKEN}
   
    vpc:
      securityGroupIds:
        - ${self:custom.securityGroups.${opt:stage}}
      subnetIds:        
        - ${self:custom.subnets.${opt:stage}}
    events:
      - http:
          path: /mult/base
          method: post
          private: true

      - http:
          path: /mult/upload/image
          method: post
          private: true

      - http:
          path: /mult/upload/audio
          method: post
          private: true

      - http:
          path: /mult/secure-images/{filename}
          method: get
          private: true

      - http:
          path: /mult/secure-audios/{filename}
          method: get
          private: true

  floiint-chat:    
    image:       
      uri: 392002456877.dkr.ecr.eu-west-3.amazonaws.com/floiint-docker:latest
    environment: 
        HANDLER: chat
        DATABASE_CHAT_NAME: ${self:custom.environments.${opt:stage}.DATABASE_CHAT_NAME}
        DABATASE_CHAT_SERVER: ${self:custom.environments.${opt:stage}.DABATASE_CHAT_SERVER}
        DATABASE_CHAT_PORT: ${self:custom.environments.${opt:stage}.DATABASE_CHAT_PORT}
        DATABASE_CHAT_USER: ${self:custom.environments.${opt:stage}.DATABASE_CHAT_USER}
        DATABASE_CHAT_PASS: ${self:custom.environments.${opt:stage}.DATABASE_CHAT_PASS}        
        SECRET_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_TOKEN}
        SECRET_REFRESH_TOKEN: ${self:custom.environments.${opt:stage}.SECRET_REFRESH_TOKEN}
        SOCKET_SERVER: ${self:custom.environments.${opt:stage}.SOCKET_SERVER}
        SOCKET_SERVER_PORT: ${self:custom.environments.${opt:stage}.SOCKET_SERVER_PORT}

        
   
    vpc:
      securityGroupIds:
        - ${self:custom.securityGroups.${opt:stage}}
      subnetIds:        
        - ${self:custom.subnets.${opt:stage}}
    events:
      - http:
          path: /chat/base
          method: post
          private: true
          
      - http:
          path: /chat/new-contact
          method: post
          private: true
      


resources:
  Resources:
    MyApiGatewayApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: FloiintApiKey
        Enabled: true
        StageKeys:
          - RestApiId:
              Ref: ApiGatewayRestApi
            StageName:
              dev
    MyApiGatewayUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: FloiintApiUsagePlan
        ApiStages:
          - ApiId:
              Ref: ApiGatewayRestApi
            Stage: 
              dev
        Throttle:
          RateLimit: 100
          BurstLimit: 200
        Quota:
          Limit: 1000
          Period: MONTH
    MyApiGatewayUsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId:
          Ref: MyApiGatewayApiKey
        KeyType: API_KEY
        UsagePlanId:
          Ref: MyApiGatewayUsagePlan
# plugins:
#   - serverless-offline